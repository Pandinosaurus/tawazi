{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tawazi","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The tawazi library enables parallel execution of functions in a DAG dependency structure. This library satisfies the following: * Stable, robust, well tested * lightweight * Thread Safety * Low to no dependencies * Legacy Python versions support * pypy support</p> <p>In the context of the DAG, these functions are called <code>ExecNode</code>s.</p> <p>This library supports: * Limiting the number of \"Threads\" to be used * Priority Choice of each <code>ExecNode</code> * Per <code>ExecNode</code> choice of parallelization (i.e. An <code>ExecNode</code> is allowed to run in parallel with another <code>ExecNode</code> or not)</p> <p>Note: The library is still at an advanced state of development. Your contributions are highly welcomed.</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>#  type: ignore\nfrom time import sleep\nfrom tawazi import DAG, ExecNode\ndef a():\nprint(\"Function 'a' is running\", flush=True)\nsleep(1)\nreturn \"A\"\ndef b():\nprint(\"Function 'b' is running\", flush=True)\nsleep(1)\nreturn \"B\"\ndef c(a, b):\nprint(\"Function 'c' is running\", flush=True)\nprint(f\"Function 'c' received {a} from 'a' &amp; {b} from 'b'\", flush=True)\nreturn f\"{a} + {b} = C\"\nif __name__ == \"__main__\":\n# Define dependencies\n# ExecNodes are defined using an id_: it has to be hashable (It can be the function itself)\nexec_nodes = [\nExecNode(a, a, is_sequential=False),\nExecNode(b, b, is_sequential=False),\nExecNode(c, c, [a, b], is_sequential=False),\n]\ng = DAG(exec_nodes, max_concurrency=2)\ng.execute()\n</code></pre>"},{"location":"#name-explanation","title":"Name explanation","text":"<p>The libraries name is inspired from the arabic word \u062a\u064e\u0648\u064e\u0627\u0632\u064d which means parallel.</p>"},{"location":"DAGExecution/","title":"DAGExecution","text":"<p>         Bases: <code>Generic[P, RVDAG]</code></p> <p>A disposable callable instance of a DAG.</p> <p>It holds information about the last execution. Hence it is not threadsafe. It might be reusable, however it is not recommended to reuse an instance of DAGExecutor!.</p> Source code in <code>tawazi/dag.py</code> <pre><code>class DAGExecution(Generic[P, RVDAG]):\n\"\"\"A disposable callable instance of a DAG.\n    It holds information about the last execution. Hence it is not threadsafe.\n    It might be reusable, however it is not recommended to reuse an instance of DAGExecutor!.\n    \"\"\"\ndef __init__(\nself,\ndag: DAG[P, RVDAG],\n*,\ntarget_nodes: Optional[List[Alias]] = None,\nexclude_nodes: Optional[List[Alias]] = None,\ncache_deps_of: Optional[List[Alias]] = None,\ncache_in: str = \"\",\nfrom_cache: str = \"\",\ncall_id: Optional[str] = None,\n):\n\"\"\"Constructor.\n        Args:\n            dag (DAG): The attached DAG.\n            target_nodes (Optional[List[Alias]]): The leave ExecNodes to execute.\n                If None will execute all ExecNodes.\n                Defaults to None.\n            exclude_nodes (Optional[List[Alias]]): The leave ExecNodes to exclude.\n                If None will exclude all ExecNodes.\n                Defaults to None.\n            cache_deps_of (Optional[List[Alias]]): cache all the dependencies of these nodes.\n                This option can not be used together with target_nodes nor exclude_nodes.\n            cache_in (str):\n                the path to the file where the execution should be cached.\n                The path should end in `.pkl`.\n                Will skip caching if `cache_in` is Falsy.\n                Will raise PickleError if any of the values passed around in the DAG is not pickleable.\n                Defaults to \"\".\n            from_cache (str):\n                the path to the file where the execution should be loaded from.\n                The path should end in `.pkl`.\n                Will skip loading from cache if `from_cache` is Falsy.\n                Defaults to \"\".\n            call_id (Optional[str]): identification of the current execution.\n                This will be inserted into thread_name_prefix while executing the threadPool.\n                It will be used in the future for identifying the execution inside Processes etc.\n        \"\"\"\n# todo: Maybe we can support .dill to extend the possibilities of the exchanged values, but this won't solve the whole problem\nself.dag = dag\nself.target_nodes = target_nodes\nself.exclude_nodes = exclude_nodes\nself.cache_deps_of = cache_deps_of\nself.cache_in = cache_in\nself.from_cache = from_cache\n# NOTE: from_cache is orthogonal to cache_in which means that if cache_in is set at the same time as from_cache.\n#  in this case the DAG will be loaded from_cache and the results will be saved again to the cache_in file.\nself.call_id = call_id\n# get the leaves ids to execute in case of a subgraph\nself.target_nodes = target_nodes\nself.exclude_nodes = exclude_nodes\nself.xn_dict: Dict[Identifier, ExecNode] = {}\nself.results: Dict[Identifier, Any] = {}\n# logic parts\nif self.cache_deps_of is not None:\nself.graph = self.dag._make_subgraph(self.cache_deps_of)\nelse:\nself.graph = self.dag._make_subgraph(self.target_nodes, self.exclude_nodes)\nself.scheduled_nodes = self.graph.nodes\nself.executed = False\n@property\ndef cache_in(self) -&gt; str:\n\"\"\"The path to the file where the execution should be cached.\n        Returns:\n            str: The path to the file where the execution should be cached.\n        \"\"\"\nreturn self._cache_in\n@cache_in.setter\ndef cache_in(self, cache_in: str) -&gt; None:\nif cache_in and not cache_in.endswith(\".pkl\"):\nraise ValueError(\"cache_in should end with.pkl\")\nself._cache_in = cache_in\n@property\ndef from_cache(self) -&gt; str:\n\"\"\"Get the file path from which the cached execution should be loaded.\n        Returns:\n            str: the file path of the cached execution\n        \"\"\"\nreturn self._from_cache\n@from_cache.setter\ndef from_cache(self, from_cache: str) -&gt; None:\nif from_cache and not from_cache.endswith(\".pkl\"):\nraise ValueError(\"from_cache should end with.pkl\")\nself._from_cache = from_cache\n@property\ndef cache_deps_of(self) -&gt; Optional[List[Alias]]:\n\"\"\"Cache all the dependencies of these nodes.\n        Returns:\n            Optional[List[Alias]]: List of Aliases passed to cache_deps_of while instantiating DAGExecution\n        \"\"\"\nreturn self._cache_deps_of\n@cache_deps_of.setter\ndef cache_deps_of(self, cache_deps_of: Optional[List[Alias]]) -&gt; None:\nif (\nself.target_nodes is not None or self.exclude_nodes is not None\n) and cache_deps_of is not None:\nraise ValueError(\n\"cache_deps_of can not be used together with target_nodes or exclude_nodes\"\n)\nself._cache_deps_of = cache_deps_of\n# we need to reimplement the public methods of DAG here in order to have a constant public interface\n# getters\ndef get_nodes_by_tag(self, tag: Any) -&gt; List[ExecNode]:\n\"\"\"Get all the nodes with the given tag.\n        Args:\n            tag (Any): tag of ExecNodes in question\n        Returns:\n            List[ExecNode]: corresponding ExecNodes\n        \"\"\"\nif self.executed:\nreturn [ex_n for ex_n in self.xn_dict.values() if ex_n.tag == tag]\nreturn self.dag.get_nodes_by_tag(tag)\ndef get_node_by_id(self, id_: Identifier) -&gt; ExecNode:\n\"\"\"Get node with the given id.\n        Args:\n            id_ (Identifier): id of the ExecNode\n        Returns:\n            ExecNode: Corresponding ExecNode\n        \"\"\"\n# TODO: ? catch the keyError and\n#   help the user know the id of the ExecNode by pointing to documentation!?\nif self.executed:\nreturn self.xn_dict[id_]\nreturn self.dag.get_node_by_id(id_)\ndef setup(\nself,\ntarget_nodes: Optional[List[Alias]] = None,\nexclude_nodes: Optional[List[Alias]] = None,\n) -&gt; None:\n\"\"\"Does the same thing as DAG.setup.\n        Args:\n            target_nodes (Optional[List[XNId]], optional): The ExecNodes that the user aims to use in the DAG.\n                This might include setup or non setup ExecNodes. If None is provided, will run all setup ExecNodes. Defaults to None.\n            exclude_nodes (Optional[List[XNId]], optional): The ExecNodes that the user aims to exclude from the DAG.\n                The user is responsible for ensuring that the overlapping between the target_nodes and exclude_nodes is logical.\n        \"\"\"\nself.dag.setup(target_nodes=target_nodes, exclude_nodes=exclude_nodes)\ndef __call__(self, *args: P.args, **kwargs: P.kwargs) -&gt; RVDAG:\n\"\"\"Call the DAG.\n        Args:\n            *args: positional arguments to pass in to the DAG\n            **kwargs: keyword arguments to pass in to the DAG\n        Raises:\n            TawaziUsageError: if the DAGExecution has already been executed.\n        Returns:\n            RVDAG: the return value of the DAG's Execution\n        \"\"\"\nif self.executed:\nraise TawaziUsageError(\n\"DAGExecution object should not be reused. Instantiate a new one\"\n)\n# NOTE: *args will be ignored if self.from_cache is set!\ndag = self.dag\n# maybe call_id will be changed to Union[int, str].\n# Keep call_id as Optional[str] for now\ncall_id = self.call_id if self.call_id is not None else \"\"\n# 1. copy the ExecNodes\ncall_xn_dict = dag._make_call_xn_dict(*args)\nif self.from_cache:\nwith open(self.from_cache, \"rb\") as f:\ncached_results = pickle.load(f)\n# set the result for the ExecNode that were previously executed\n# this will make them skip execution inside the scheduler\nfor id_, result in cached_results.items():\ncall_xn_dict[id_].result = result\n# 2. Execute the scheduler\nself.xn_dict = dag._execute(self.graph, call_xn_dict, call_id)\nself.results = {xn.id: xn.result for xn in self.xn_dict.values()}\n# 3. cache in the graph results\nif self.cache_in:\nPath(self.cache_in).parent.mkdir(parents=True, exist_ok=True)\nwith open(self.cache_in, \"wb\") as f:\n# NOTE: we are currently only storing the results of the execution,\n#  this means that the configuration of the ExecNodes are lost!\n#  But this is ok since it should not change between executions!\n#  for example, a setup ExecNode should stay a setup ExecNode between caching in the results and reading back the cached results\n#  the same goes for the DAG itself, the behavior when an error is encountered &amp; its concurrency will be controlled via the constructor\nif self.cache_deps_of is not None:\nnon_cacheable_ids: Set[Identifier] = set()\nfor aliases in self.cache_deps_of:\nids = self.dag._alias_to_ids(aliases)\nnon_cacheable_ids = non_cacheable_ids.union(ids)\nto_cache_results = {\nid_: res\nfor id_, res in self.results.items()\nif id_ not in non_cacheable_ids\n}\nelse:\nto_cache_results = self.results\npickle.dump(\nto_cache_results, f, protocol=pickle.HIGHEST_PROTOCOL, fix_imports=False\n)\n# TODO: make DAGExecution reusable but do not guarantee ThreadSafety!\nself.executed = True\n# 3. extract the returned value/values\nreturn dag._get_return_values(self.xn_dict)  # type: ignore[return-value]\n</code></pre>"},{"location":"DAGExecution/#tawazi.dag.DAGExecution.__init__","title":"<code>__init__(dag, *, target_nodes=None, exclude_nodes=None, cache_deps_of=None, cache_in='', from_cache='', call_id=None)</code>","text":"<p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>dag</code> <code>DAG</code> <p>The attached DAG.</p> required <code>target_nodes</code> <code>Optional[List[Alias]]</code> <p>The leave ExecNodes to execute. If None will execute all ExecNodes. Defaults to None.</p> <code>None</code> <code>exclude_nodes</code> <code>Optional[List[Alias]]</code> <p>The leave ExecNodes to exclude. If None will exclude all ExecNodes. Defaults to None.</p> <code>None</code> <code>cache_deps_of</code> <code>Optional[List[Alias]]</code> <p>cache all the dependencies of these nodes. This option can not be used together with target_nodes nor exclude_nodes.</p> <code>None</code> <code>cache_in</code> <code>str</code> <p>the path to the file where the execution should be cached. The path should end in <code>.pkl</code>. Will skip caching if <code>cache_in</code> is Falsy. Will raise PickleError if any of the values passed around in the DAG is not pickleable. Defaults to \"\".</p> <code>''</code> <code>from_cache</code> <code>str</code> <p>the path to the file where the execution should be loaded from. The path should end in <code>.pkl</code>. Will skip loading from cache if <code>from_cache</code> is Falsy. Defaults to \"\".</p> <code>''</code> <code>call_id</code> <code>Optional[str]</code> <p>identification of the current execution. This will be inserted into thread_name_prefix while executing the threadPool. It will be used in the future for identifying the execution inside Processes etc.</p> <code>None</code> Source code in <code>tawazi/dag.py</code> <pre><code>def __init__(\nself,\ndag: DAG[P, RVDAG],\n*,\ntarget_nodes: Optional[List[Alias]] = None,\nexclude_nodes: Optional[List[Alias]] = None,\ncache_deps_of: Optional[List[Alias]] = None,\ncache_in: str = \"\",\nfrom_cache: str = \"\",\ncall_id: Optional[str] = None,\n):\n\"\"\"Constructor.\n    Args:\n        dag (DAG): The attached DAG.\n        target_nodes (Optional[List[Alias]]): The leave ExecNodes to execute.\n            If None will execute all ExecNodes.\n            Defaults to None.\n        exclude_nodes (Optional[List[Alias]]): The leave ExecNodes to exclude.\n            If None will exclude all ExecNodes.\n            Defaults to None.\n        cache_deps_of (Optional[List[Alias]]): cache all the dependencies of these nodes.\n            This option can not be used together with target_nodes nor exclude_nodes.\n        cache_in (str):\n            the path to the file where the execution should be cached.\n            The path should end in `.pkl`.\n            Will skip caching if `cache_in` is Falsy.\n            Will raise PickleError if any of the values passed around in the DAG is not pickleable.\n            Defaults to \"\".\n        from_cache (str):\n            the path to the file where the execution should be loaded from.\n            The path should end in `.pkl`.\n            Will skip loading from cache if `from_cache` is Falsy.\n            Defaults to \"\".\n        call_id (Optional[str]): identification of the current execution.\n            This will be inserted into thread_name_prefix while executing the threadPool.\n            It will be used in the future for identifying the execution inside Processes etc.\n    \"\"\"\n# todo: Maybe we can support .dill to extend the possibilities of the exchanged values, but this won't solve the whole problem\nself.dag = dag\nself.target_nodes = target_nodes\nself.exclude_nodes = exclude_nodes\nself.cache_deps_of = cache_deps_of\nself.cache_in = cache_in\nself.from_cache = from_cache\n# NOTE: from_cache is orthogonal to cache_in which means that if cache_in is set at the same time as from_cache.\n#  in this case the DAG will be loaded from_cache and the results will be saved again to the cache_in file.\nself.call_id = call_id\n# get the leaves ids to execute in case of a subgraph\nself.target_nodes = target_nodes\nself.exclude_nodes = exclude_nodes\nself.xn_dict: Dict[Identifier, ExecNode] = {}\nself.results: Dict[Identifier, Any] = {}\n# logic parts\nif self.cache_deps_of is not None:\nself.graph = self.dag._make_subgraph(self.cache_deps_of)\nelse:\nself.graph = self.dag._make_subgraph(self.target_nodes, self.exclude_nodes)\nself.scheduled_nodes = self.graph.nodes\nself.executed = False\n</code></pre>"},{"location":"DAGExecution/#tawazi.dag.DAGExecution.__call__","title":"<code>__call__(*args, **kwargs)</code>","text":"<p>Call the DAG.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>P.args</code> <p>positional arguments to pass in to the DAG</p> <code>()</code> <code>**kwargs</code> <code>P.kwargs</code> <p>keyword arguments to pass in to the DAG</p> <code>{}</code> <p>Raises:</p> Type Description <code>TawaziUsageError</code> <p>if the DAGExecution has already been executed.</p> <p>Returns:</p> Name Type Description <code>RVDAG</code> <code>RVDAG</code> <p>the return value of the DAG's Execution</p> Source code in <code>tawazi/dag.py</code> <pre><code>def __call__(self, *args: P.args, **kwargs: P.kwargs) -&gt; RVDAG:\n\"\"\"Call the DAG.\n    Args:\n        *args: positional arguments to pass in to the DAG\n        **kwargs: keyword arguments to pass in to the DAG\n    Raises:\n        TawaziUsageError: if the DAGExecution has already been executed.\n    Returns:\n        RVDAG: the return value of the DAG's Execution\n    \"\"\"\nif self.executed:\nraise TawaziUsageError(\n\"DAGExecution object should not be reused. Instantiate a new one\"\n)\n# NOTE: *args will be ignored if self.from_cache is set!\ndag = self.dag\n# maybe call_id will be changed to Union[int, str].\n# Keep call_id as Optional[str] for now\ncall_id = self.call_id if self.call_id is not None else \"\"\n# 1. copy the ExecNodes\ncall_xn_dict = dag._make_call_xn_dict(*args)\nif self.from_cache:\nwith open(self.from_cache, \"rb\") as f:\ncached_results = pickle.load(f)\n# set the result for the ExecNode that were previously executed\n# this will make them skip execution inside the scheduler\nfor id_, result in cached_results.items():\ncall_xn_dict[id_].result = result\n# 2. Execute the scheduler\nself.xn_dict = dag._execute(self.graph, call_xn_dict, call_id)\nself.results = {xn.id: xn.result for xn in self.xn_dict.values()}\n# 3. cache in the graph results\nif self.cache_in:\nPath(self.cache_in).parent.mkdir(parents=True, exist_ok=True)\nwith open(self.cache_in, \"wb\") as f:\n# NOTE: we are currently only storing the results of the execution,\n#  this means that the configuration of the ExecNodes are lost!\n#  But this is ok since it should not change between executions!\n#  for example, a setup ExecNode should stay a setup ExecNode between caching in the results and reading back the cached results\n#  the same goes for the DAG itself, the behavior when an error is encountered &amp; its concurrency will be controlled via the constructor\nif self.cache_deps_of is not None:\nnon_cacheable_ids: Set[Identifier] = set()\nfor aliases in self.cache_deps_of:\nids = self.dag._alias_to_ids(aliases)\nnon_cacheable_ids = non_cacheable_ids.union(ids)\nto_cache_results = {\nid_: res\nfor id_, res in self.results.items()\nif id_ not in non_cacheable_ids\n}\nelse:\nto_cache_results = self.results\npickle.dump(\nto_cache_results, f, protocol=pickle.HIGHEST_PROTOCOL, fix_imports=False\n)\n# TODO: make DAGExecution reusable but do not guarantee ThreadSafety!\nself.executed = True\n# 3. extract the returned value/values\nreturn dag._get_return_values(self.xn_dict)  # type: ignore[return-value]\n</code></pre>"},{"location":"DAGExecution/#tawazi.dag.DAGExecution.setup","title":"<code>setup(target_nodes=None, exclude_nodes=None)</code>","text":"<p>Does the same thing as DAG.setup.</p> <p>Parameters:</p> Name Type Description Default <code>target_nodes</code> <code>Optional[List[XNId]]</code> <p>The ExecNodes that the user aims to use in the DAG. This might include setup or non setup ExecNodes. If None is provided, will run all setup ExecNodes. Defaults to None.</p> <code>None</code> <code>exclude_nodes</code> <code>Optional[List[XNId]]</code> <p>The ExecNodes that the user aims to exclude from the DAG. The user is responsible for ensuring that the overlapping between the target_nodes and exclude_nodes is logical.</p> <code>None</code> Source code in <code>tawazi/dag.py</code> <pre><code>def setup(\nself,\ntarget_nodes: Optional[List[Alias]] = None,\nexclude_nodes: Optional[List[Alias]] = None,\n) -&gt; None:\n\"\"\"Does the same thing as DAG.setup.\n    Args:\n        target_nodes (Optional[List[XNId]], optional): The ExecNodes that the user aims to use in the DAG.\n            This might include setup or non setup ExecNodes. If None is provided, will run all setup ExecNodes. Defaults to None.\n        exclude_nodes (Optional[List[XNId]], optional): The ExecNodes that the user aims to exclude from the DAG.\n            The user is responsible for ensuring that the overlapping between the target_nodes and exclude_nodes is logical.\n    \"\"\"\nself.dag.setup(target_nodes=target_nodes, exclude_nodes=exclude_nodes)\n</code></pre>"},{"location":"DAGExecution/#tawazi.dag.DAGExecution.get_node_by_id","title":"<code>get_node_by_id(id_)</code>","text":"<p>Get node with the given id.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>Identifier</code> <p>id of the ExecNode</p> required <p>Returns:</p> Name Type Description <code>ExecNode</code> <code>ExecNode</code> <p>Corresponding ExecNode</p> Source code in <code>tawazi/dag.py</code> <pre><code>def get_node_by_id(self, id_: Identifier) -&gt; ExecNode:\n\"\"\"Get node with the given id.\n    Args:\n        id_ (Identifier): id of the ExecNode\n    Returns:\n        ExecNode: Corresponding ExecNode\n    \"\"\"\n# TODO: ? catch the keyError and\n#   help the user know the id of the ExecNode by pointing to documentation!?\nif self.executed:\nreturn self.xn_dict[id_]\nreturn self.dag.get_node_by_id(id_)\n</code></pre>"},{"location":"DAGExecution/#tawazi.dag.DAGExecution.get_nodes_by_tag","title":"<code>get_nodes_by_tag(tag)</code>","text":"<p>Get all the nodes with the given tag.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Any</code> <p>tag of ExecNodes in question</p> required <p>Returns:</p> Type Description <code>List[ExecNode]</code> <p>List[ExecNode]: corresponding ExecNodes</p> Source code in <code>tawazi/dag.py</code> <pre><code>def get_nodes_by_tag(self, tag: Any) -&gt; List[ExecNode]:\n\"\"\"Get all the nodes with the given tag.\n    Args:\n        tag (Any): tag of ExecNodes in question\n    Returns:\n        List[ExecNode]: corresponding ExecNodes\n    \"\"\"\nif self.executed:\nreturn [ex_n for ex_n in self.xn_dict.values() if ex_n.tag == tag]\nreturn self.dag.get_nodes_by_tag(tag)\n</code></pre>"},{"location":"dag/","title":"DAG","text":"<p>         Bases: <code>Generic[P, RVDAG]</code></p> <p>Data Structure containing ExecNodes with interdependencies.</p> <p>Please do not instantiate this class directly. Use the decorator <code>@dag</code> instead.</p> The ExecNodes can be executed in parallel with the following restrictions <ul> <li>Limited number of threads.</li> <li>Parallelization constraint of each ExecNode (is_sequential attribute)</li> </ul> Source code in <code>tawazi/dag.py</code> <pre><code>class DAG(Generic[P, RVDAG]):\n\"\"\"Data Structure containing ExecNodes with interdependencies.\n    Please do not instantiate this class directly. Use the decorator `@dag` instead.\n    The ExecNodes can be executed in parallel with the following restrictions:\n        * Limited number of threads.\n        * Parallelization constraint of each ExecNode (is_sequential attribute)\n    \"\"\"\ndef __init__(\nself,\nexec_nodes: List[ExecNode],\nmax_concurrency: int = 1,\nbehavior: ErrorStrategy = ErrorStrategy.strict,\n):\n\"\"\"Constructor of the DAG. Should not be called directly. Instead use the `dag` decorator.\n        Args:\n            exec_nodes: all the ExecNodes\n            max_concurrency: the maximal number of threads running in parallel\n            behavior: specify the behavior if an ExecNode raises an Error. Three option are currently supported:\n                1. DAG.STRICT: stop the execution of all the DAG\n                2. DAG.ALL_CHILDREN: do not execute all children ExecNodes, and continue execution of the DAG\n                2. DAG.PERMISSIVE: continue execution of the DAG and ignore the error\n        \"\"\"\nself.graph_ids = DiGraphEx()\n# ExecNodes can be shared between Graphs, their call signatures might also be different\n# NOTE: maybe this should be transformed into a property because there is a deepcopy for node_dict...\n#  this means that there are different ExecNodes that are hanging arround in the same instance of the DAG\nself.exec_nodes = exec_nodes\nself.max_concurrency = max_concurrency\nself.node_dict: Dict[Identifier, ExecNode] = {\nexec_node.id: exec_node for exec_node in self.exec_nodes\n}\n# Compute all the tags in the DAG to reduce overhead during computation\nself.tagged_nodes = defaultdict(list)\nfor xn in self.exec_nodes:\nif xn.tag:\nself.tagged_nodes[xn.tag].append(xn)\n# Might be useful in the future\nself.node_dict_by_name: Dict[str, ExecNode] = {\nexec_node.__name__: exec_node for exec_node in self.exec_nodes\n}\nself.return_ids: ReturnIDsType = None\nself.input_ids: List[Identifier] = []\n# a sequence of execution to be applied in a for loop\nself.exec_node_sequence: List[ExecNode] = []\nself.behavior = behavior\nself._build()\nself.bckrd_deps = {\nxn.id: list(self.graph_ids.predecessors(xn.id)) for xn in self.exec_nodes\n}\nself.frwrd_deps = {xn.id: list(self.graph_ids.successors(xn.id)) for xn in self.exec_nodes}\n# calculate the sum of priorities of all recursive children\nself._assign_compound_priority()\n# make a valid execution sequence to run sequentially if needed\ntopological_order = self.graph_ids.topologically_sorted\nself.exec_node_sequence = [self.node_dict[xn_id] for xn_id in topological_order]\n@property\ndef max_concurrency(self) -&gt; int:\n\"\"\"Maximal number of threads running in parallel. (will change!).\"\"\"\nreturn self._max_concurrency\n@max_concurrency.setter\ndef max_concurrency(self, value: int) -&gt; None:\n\"\"\"Set the maximal number of threads running in parallel.\n        Args:\n            value (int): maximum number of threads running in parallel\n        Raises:\n            ValueError: if value is not a positive integer\n        \"\"\"\nif not isinstance(value, int):\nraise ValueError(\"max_concurrency must be an int\")\nif value &lt; 1:\nraise ValueError(\"Invalid maximum number of threads! Must be a positive integer\")\nself._max_concurrency = value\n# getters\ndef get_nodes_by_tag(self, tag: Any) -&gt; List[ExecNode]:\n\"\"\"Get the ExecNodes with the given tag.\n        Note: the returned ExecNode is not modified by any execution!\n            This means that you can not get the result of its execution via `DAG.get_nodes_by_tag(&lt;tag&gt;).result`.\n            In order to do that, you need to make a DAGExecution and then call `DAGExecution.get_nodes_by_tag(&lt;tag&gt;).result`, which will contain the results.\n        Args:\n            tag (Any): tag of the ExecNodes\n        Returns:\n            List[ExecNode]: corresponding ExecNodes\n        \"\"\"\nreturn [ex_n for ex_n in self.exec_nodes if ex_n.tag == tag]\ndef get_node_by_id(self, id_: Identifier) -&gt; ExecNode:\n\"\"\"Get the ExecNode with the given id.\n        Note: the returned ExecNode is not modified by any execution!\n            This means that you can not get the result of its execution via `DAG.get_node_by_id(&lt;id&gt;).result`.\n            In order to do that, you need to make a DAGExecution and then call `DAGExecution.get_node_by_id(&lt;id&gt;).result`, which will contain the results.\n        Args:\n            id_ (Identifier): id of the ExecNode\n        Returns:\n            ExecNode: corresponding ExecNode\n        \"\"\"\n# TODO: ? catch the keyError and\n#   help the user know the id of the ExecNode by pointing to documentation!?\nreturn self.node_dict[id_]\n# TODO: get node by usage (the order of call of an ExecNode)\n# TODO: validate using Pydantic\ndef _find_cycle(self) -&gt; Optional[List[Tuple[str, str]]]:\n\"\"\"Finds the cycles in the DAG. A DAG shouldn't have any dependency cycle.\n        Returns:\n            A list of the edges responsible for the cycles in case there are some (in forward and backward),\n             otherwise nothing. (e.g. [('taxes', 'amount_reconciliation'),('amount_reconciliation', 'taxes')])\n        \"\"\"\ntry:\ncycle: List[Tuple[str, str]] = find_cycle(self.graph_ids)\nreturn cycle\nexcept NetworkXNoCycle:\nreturn None\ndef _build(self) -&gt; None:\n\"\"\"Builds the graph and the sequence order for the computation.\n        Raises:\n            NetworkXUnfeasible: if the graph has cycles\n        \"\"\"\n# 1. Make the graph\n# 1.1 add nodes\nfor xn in self.exec_nodes:\nself.graph_ids.add_node(xn.id)\n# 1.2 add edges\nfor xn in self.exec_nodes:\nedges = [(dep.id, xn.id) for dep in xn.dependencies]\nself.graph_ids.add_edges_from(edges)\n# 2. Validate the DAG: check for circular dependencies\ncycle = self._find_cycle()\nif cycle:\nraise NetworkXUnfeasible(\nf\"the product contains at least a circular dependency: {cycle}\"\n)\ndef _validate(self) -&gt; None:\n# validate setup ExecNodes\nfor xn in self.exec_nodes:\nif xn.setup and any(dep.id in self.input_ids for dep in xn.dependencies):\nraise TawaziUsageError(\nf\"The ExecNode {xn} takes as parameters one of the DAG's input parameter\"\n)\n# future validations...\ndef _assign_compound_priority(self) -&gt; None:\n\"\"\"Assigns a compound priority to all nodes in the graph.\n        The compound priority is the sum of the priorities of all children recursively.\n        \"\"\"\n# 1. deepcopy graph_ids because it will be modified (pruned)\ngraph_ids = deepcopy(self.graph_ids)\nleaf_ids = graph_ids.leaf_nodes\n# 2. assign the compound priority for all the remaining nodes in the graph:\n# Priority assignment happens by epochs:\n# 2.1. during every epoch, we assign the compound priority for the parents of the current leaf nodes\n# 2.2. at the end of every epoch, we trim the graph from its leaf nodes;\n#       hence the previous parents become the new leaf nodes\nwhile len(graph_ids) &gt; 0:\n# Epoch level\nfor leaf_id in leaf_ids:\nleaf_node = self.node_dict[leaf_id]\nfor parent_id in self.bckrd_deps[leaf_id]:\n# increment the compound_priority of the parent node by the leaf priority\nparent_node = self.node_dict[parent_id]\nparent_node.compound_priority += leaf_node.compound_priority\n# trim the graph from its leaf nodes\ngraph_ids.remove_node(leaf_id)\n# assign the new leaf nodes\nleaf_ids = graph_ids.leaf_nodes\ndef draw(self, k: float = 0.8, display: bool = True, t: int = 3) -&gt; None:\n\"\"\"Draws the Networkx directed graph.\n        Args:\n            k (float): parameter for the layout of the graph, the higher, the further the nodes apart. Defaults to 0.8.\n            display (bool): display the layout created. Defaults to True.\n            t (int): time to display in seconds. Defaults to 3.\n        \"\"\"\nimport matplotlib.pyplot as plt\n# TODO: use graphviz instead! it is much more elegant\npos = nx.spring_layout(self.graph_ids, seed=42069, k=k, iterations=20)\nnx.draw(self.graph_ids, pos, with_labels=True)\nif display:\nplt.ion()\nplt.show()\ntime.sleep(t)\nplt.close()\n@classmethod\ndef _copy_non_setup_xns(cls, x_nodes: Dict[str, ExecNode]) -&gt; Dict[str, ExecNode]:\n\"\"\"Deep copy all ExecNodes except setup ExecNodes because they are shared throughout the DAG instance.\n        Args:\n            x_nodes: Dict[str, ExecNode] x_nodes to be deep copied\n        Returns:\n            Dict[str, ExecNode] copy of x_nodes\n        \"\"\"\n# TODO: separate setup xnodes and non setup xndoes.\n#  maybe use copy instead of deepcopy for the non setup xnodes!? I think this is a bad idea it won't work\nx_nodes_copy = {}\nfor id_, x_nd in x_nodes.items():\n# if execnode is a setup node, it shouldn't be copied\nif x_nd.setup:\nx_nodes_copy[id_] = x_nd\nelse:\n# no need to deepcopy. we only need to know if self.result is NoVal or not (TODO: fix this COmment)\nx_nodes_copy[id_] = copy(x_nd)\nreturn x_nodes_copy\ndef _execute(\nself,\ngraph: DiGraphEx,\nmodified_node_dict: Optional[Dict[str, ExecNode]] = None,\ncall_id: str = \"\",\n) -&gt; Dict[Identifier, Any]:\n\"\"\"Thread safe execution of the DAG.\n        (Except for the setup nodes! Please run DAG.setup() in a single thread because its results will be cached).\n        Args:\n            graph: the graph ids to be executed\n            modified_node_dict: A dictionary of the ExecNodes that have been modified by setting the input parameters of the DAG.\n            call_id (str): A unique identifier for the execution.\n                It can be used to distinguish the id of the call inside the thread.\n                It might be useful to debug and to exchange information between the main thread and the sub-threads (per-node threads)\n        Returns:\n            node_dict: dictionary with keys the name of the function and value the result after the execution\n        \"\"\"\n# 0.1 create a subgraph of the graph if necessary\n# 0.2 deepcopy the node_dict in order to modify the results inside every node and make the dag reusable\n#     modified_node_dict are used to modify the values inside the ExecNode corresponding\n#     to the input arguments provided to the whole DAG (ArgExecNode)\nxns_dict = modified_node_dict or DAG._copy_non_setup_xns(self.node_dict)\n# 0.3 prune the graph from the ArgExecNodes so that they don't get executed in the ThreadPool\nprecomputed_xns_ids = [id_ for id_ in graph if xns_dict[id_].executed]\nfor id_ in precomputed_xns_ids:\ngraph.remove_node(id_)\n# 0.4 create variables related to futures\nfutures: Dict[Identifier, \"Future[Any]\"] = {}\ndone: Set[\"Future[Any]\"] = set()\nrunning: Set[\"Future[Any]\"] = set()\n# TODO: support non \"threadable\" ExecNodes.\n#  These are ExecNodes that can't run inside a thread because their arguments aren't pickelable!\n# 0.5 create helpers functions encapsulated from the outside\ndef get_num_running_threads(_futures: Dict[Identifier, \"Future[Any]\"]) -&gt; int:\n# use not future.done() because there is no guarantee that Thread pool will directly execute\n# the submitted thread\nreturn sum([not future.done() for future in _futures.values()])\ndef get_highest_priority_nodes(nodes: List[ExecNode]) -&gt; List[ExecNode]:\nhighest_priority = max(node.priority for node in nodes)\nreturn [node for node in nodes if node.priority == highest_priority]\n# 0.6 get the candidates root nodes that can be executed\n# runnable_nodes_ids will be empty if all root nodes are running\nrunnable_xns_ids = graph.root_nodes()\nwith ThreadPoolExecutor(\nmax_workers=self.max_concurrency, thread_name_prefix=call_id\n) as executor:\nwhile len(graph):\n# attempt to run **A SINGLE** root node #\n# 6. block scheduler execution if no root node can be executed.\n#    this can occur in two cases:\n#       1. if maximum concurrency is reached\n#       2. if no runnable node exists (i.e. all root nodes are being executed)\n#    in both cases: block until a node finishes\n#       =&gt; a new root node will be available\nnum_running_threads = get_num_running_threads(futures)\nnum_runnable_nodes_ids = len(runnable_xns_ids)\nif num_running_threads == self.max_concurrency or num_runnable_nodes_ids == 0:\n# must wait and not submit any workers before a worker ends\n# (that might create a new more prioritized node) to be executed\nlogger.debug(\nf\"Waiting for ExecNodes {running} to finish. Finished running {done}\"\n)\ndone_, running = wait(running, return_when=FIRST_COMPLETED)\ndone = done.union(done_)\n# 1. among the finished futures:\n#       1. checks for exceptions\n#       2. and remove them from the graph\nfor id_, fut in futures.items():\nif fut.done() and id_ in graph:\nlogger.debug(f\"Remove ExecNode {id_} from the graph\")\nself._handle_exception(graph, fut, id_)\ngraph.remove_node(id_)\n# 2. list the root nodes that aren't being executed\nrunnable_xns_ids = list(set(graph.root_nodes()) - set(futures.keys()))\n# 3. if no runnable node exist, go to step 6 (wait for a node to finish)\n#   (This **might** create a new root node)\nif len(runnable_xns_ids) == 0:\nlogger.debug(\"No runnable Nodes available\")\ncontinue\n# 4. choose a node to run\n# 4.1 get the most prioritized node to run\n# 4.1.1 get all the nodes that have the highest priority\nrunnable_xns = [xns_dict[node_id] for node_id in runnable_xns_ids]\nhighest_priority_xns = get_highest_priority_nodes(runnable_xns)\n# 4.1.2 get the node with the highest compound priority\n# (randomly selected if multiple are suggested)\nhighest_priority_xns.sort(key=lambda node: node.compound_priority)\nxn = highest_priority_xns[-1]\nlogger.info(f\"{xn.id} will run!\")\n# 4.2 if the current node must be run sequentially, wait for a running node to finish.\n# in that case we must prune the graph to re-check whether a new root node\n# (maybe with a higher priority) has been created =&gt; continue the loop\n# Note: This step might run a number of times in the while loop\n#       before the exec_node gets submitted\nnum_running_threads = get_num_running_threads(futures)\nif xn.is_sequential and num_running_threads != 0:\nlogger.debug(\nf\"{xn.id} must not run in parallel.\"\nf\"Wait for the end of a node in {running}\"\n)\ndone_, running = wait(running, return_when=FIRST_COMPLETED)\n# go to step 6\ncontinue\n# 5.1 submit the exec node to the executor\n# TODO: make a special case if self.max_concurrency == 1\n#   then invoke the function directly instead of launching a thread\nexec_future = executor.submit(xn._execute, node_dict=xns_dict)\nrunning.add(exec_future)\nfutures[xn.id] = exec_future\n# 5.2 wait for the sequential node to finish\n# TODO: not sure this code ever runs\nif xn.is_sequential:\nwait(futures.values(), return_when=ALL_COMPLETED)\nreturn xns_dict\ndef _alias_to_ids(self, alias: Alias) -&gt; List[Identifier]:\n\"\"\"Extract an ExecNode ID from an Alias (Tag, ExecNode ID or ExecNode).\n        Args:\n            alias (Alias): an Alias (Tag, ExecNode ID or ExecNode)\n        Returns:\n            The corresponding ExecNode IDs\n        Raises:\n            ValueError: if a requested ExecNode is not found in the DAG\n            TawaziTypeError: if the Type of the identifier is not Tag, Identifier or ExecNode\n        \"\"\"\nif isinstance(alias, ExecNode):\nreturn [alias.id]\n# todo: do further validation for the case of the tag!!\nif isinstance(alias, (Identifier, tuple)):\n# if leaves_identification is not ExecNode, it can be either\n#  1. a Tag (Highest priority in case an id with the same value exists)\nif nodes := self.tagged_nodes.get(alias):\nreturn [node.id for node in nodes]\n#  2. or a node id!\nif isinstance(alias, Identifier) and alias in self.node_dict:\nnode = self.get_node_by_id(alias)\nreturn [node.id]\nraise ValueError(\nf\"node or tag {alias} not found in DAG.\\n\"\nf\" Available nodes are {self.node_dict}.\\n\"\nf\" Available tags are {list(self.tagged_nodes.keys())}\"\n)\nraise TawaziTypeError(\n\"target_nodes must be of type ExecNode, \"\nf\"str or tuple identifying the node but provided {alias}\"\n)\n# NOTE: this function is named wrongly!\ndef _get_target_ids(self, target_nodes: List[Alias]) -&gt; List[Identifier]:\n\"\"\"Get the ids of ExecNodes corresponding to target_nodes.\n        Args:\n            target_nodes (Optional[List[Alias]]): list of a ExecNode Aliases that the user might provide to run a subgraph\n        Returns:\n            List[Identifier]: Leaf ExecNodes' Identities\n        \"\"\"\nreturn list(chain(*(self._alias_to_ids(alias) for alias in target_nodes)))\ndef _extend_leaves_ids_debug_xns(self, leaves_ids: List[Identifier]) -&gt; List[Identifier]:\nnew_debug_xn_discovered = True\nwhile new_debug_xn_discovered:\nnew_debug_xn_discovered = False\nfor id_ in leaves_ids:\nfor successor_id in self.frwrd_deps[id_]:\nis_successor_debug = self.node_dict[successor_id].debug\nif successor_id not in leaves_ids and is_successor_debug:\n# a new debug XN has been discovered!\nnew_debug_xn_discovered = True\npreds_of_succs_ids = [xn_id for xn_id in self.bckrd_deps[successor_id]]\nif set(preds_of_succs_ids).issubset(set(leaves_ids)):\n# this new XN can run by only running the current leaves_ids\nleaves_ids.append(successor_id)\nreturn leaves_ids\ndef setup(\nself,\ntarget_nodes: Optional[List[Alias]] = None,\nexclude_nodes: Optional[List[Alias]] = None,\n) -&gt; None:\n\"\"\"Run the setup ExecNodes for the DAG.\n        If target_nodes are provided, run only the necessary setup ExecNodes, otherwise will run all setup ExecNodes.\n        NOTE: `DAG` arguments should not be passed to setup ExecNodes.\n            Only pass in constants or setup `ExecNode`s results.\n        Args:\n            target_nodes (Optional[List[XNId]], optional): The ExecNodes that the user aims to use in the DAG.\n                This might include setup or non setup ExecNodes. If None is provided, will run all setup ExecNodes. Defaults to None.\n            exclude_nodes (Optional[List[XNId]], optional): The ExecNodes that the user aims to exclude from the DAG.\n                The user is responsible for ensuring that the overlapping between the target_nodes and exclude_nodes is logical.\n        \"\"\"\n# 1. select all setup ExecNodes\n#  do not copy the setup nodes because we want them to be modified per DAG instance!\nall_setup_nodes = {\nnd.id: nd\nfor nd in self.exec_nodes\nif nd.setup or (isinstance(nd, ArgExecNode) and nd.executed)\n}\n# 2. if target_nodes is not provided run all setup ExecNodes\nif target_nodes is None:\ntarget_ids = list(all_setup_nodes.keys())\ngraph = self._make_subgraph(target_ids, exclude_nodes)  # type: ignore[arg-type]\nelse:\n# 2.1 the leaves_ids that the user wants to execute\n#  however they might contain non setup nodes... so we should extract all the nodes ids\n#  that must be run in order to run the target_nodes ExecNodes\n#  afterwards we can remove the non setup nodes\ntarget_ids = self._get_target_ids(target_nodes)\n# 2.2 filter non setup ExecNodes\ngraph = self._make_subgraph(target_ids, exclude_nodes)  # type: ignore[arg-type]\nids_to_remove = [id_ for id_ in graph if id_ not in all_setup_nodes]\nfor id_ in ids_to_remove:\ngraph.remove_node(id_)\n# TODO: handle debug XNs!\nself._execute(graph, all_setup_nodes)\ndef executor(self, **kwargs: Any) -&gt; \"DAGExecution[P, RVDAG]\":\n\"\"\"Generates a DAGExecution for the DAG.\n        Args:\n            **kwargs (Any): keyword arguments to be passed to DAGExecution's constructor\n        Returns:\n            DAGExecution: an executor for the DAG\n        \"\"\"\nreturn DAGExecution(self, **kwargs)\ndef _make_subgraph(\nself,\ntarget_nodes: Optional[List[Alias]] = None,\nexclude_nodes: Optional[List[Alias]] = None,\n) -&gt; nx.DiGraph:\ngraph = deepcopy(self.graph_ids)\nif target_nodes is not None:\ntarget_ids = self._get_target_ids(target_nodes)\ngraph.subgraph_leaves(target_ids)\nif exclude_nodes is not None:\nexclude_ids = list(chain(*(self._alias_to_ids(alias) for alias in exclude_nodes)))\nfor id_ in exclude_ids:\n# maybe previously removed by :\n# 1. not being inside the subgraph\n# 2. being a successor of an excluded node\nif id_ in graph:\ngraph.remove_recursively(id_)\nif target_nodes and exclude_nodes:\nfor id_ in target_ids:\nif id_ not in graph:\nraise TawaziUsageError(\nf\"target_nodes include {id_} which is removed by exclude_nodes: {exclude_ids}, \"\nf\"please verify that they don't overlap in a non logical way!\"\n)\n# handle debug nodes\nif Cfg.RUN_DEBUG_NODES:\nleaves_ids = graph.leaf_nodes\n# after extending leaves_ids, we should do a recheck because this might recreate another debug-able XN...\ntarget_ids = self._extend_leaves_ids_debug_xns(leaves_ids)\n# extend the graph with the debug XNs\n# This is not efficient but it is ok since we are debugging the code anyways\ndebug_graph = deepcopy(self.graph_ids)\ndebug_graph.subgraph_leaves(list(graph.nodes) + target_ids)\ngraph = debug_graph\n# 3. clean all debug XNs if they shouldn't run!\nelse:\nto_remove = [id_ for id_ in graph if self.node_dict[id_].debug]\nfor id_ in to_remove:\ngraph.remove_node(id_)\nreturn graph\ndef __call__(self, *args: P.args, **kwargs: P.kwargs) -&gt; RVDAG:\n\"\"\"Execute the DAG scheduler via a similar interface to the function that describes the dependencies.\n        Note: Currently kwargs are not supported.\n            They will supported soon!\n        Args:\n            *args (P.args): arguments to be passed to the call of the DAG\n            **kwargs (P.kwargs): keyword arguments to be passed to the call of the DAG\n        Returns:\n            RVDAG: return value of the DAG's execution\n        Raises:\n            TawaziUsageError: kwargs are passed\n        \"\"\"\nif kwargs:\nraise TawaziUsageError(f\"currently DAG does not support keyword arguments: {kwargs}\")\n# 1. generate the subgraph to be executed\ngraph = self._make_subgraph()\n# 2. copy the ExecNodes\ncall_xn_dict = self._make_call_xn_dict(*args)\n# 3. Execute the scheduler\nall_nodes_dict = self._execute(graph, call_xn_dict)\n# 4. extract the returned value/values\nreturn self._get_return_values(all_nodes_dict)  # type: ignore[return-value]\ndef _make_call_xn_dict(self, *args: Any) -&gt; Dict[Identifier, ExecNode]:\n\"\"\"Generate the calling ExecNode dict.\n        This is a dict containing ExecNodes that will be executed (hence modified) by the DAG scheduler.\n        This takes into consideration:\n         1. deep copying the ExecNodes\n         2. filling the arguments of the call\n         3. skipping the copy for setup ExecNodes\n        Args:\n            *args (Any): arguments to be passed to the call of the DAG\n        Returns:\n            Dict[Identifier, ExecNode]: The modified ExecNode dict which will be executed by the DAG scheduler.\n        Raises:\n            TypeError: If called with an invalid number of arguments\n        \"\"\"\n# 1. deepcopy the node_dict because it will be modified by the DAG's execution\ncall_xn_dict = DAG._copy_non_setup_xns(self.node_dict)\n# 2. parse the input arguments of the pipeline\n# 2.1 default valued arguments can be skipped and not provided!\n# note: if not enough arguments are provided then the code will fail\n# inside the DAG's execution through the raise_err lambda\nif args:\n# 2.2 can't provide more than enough arguments\nif len(args) &gt; len(self.input_ids):\nraise TypeError(\nf\"The DAG takes a maximum of {len(self.input_ids)} arguments. {len(args)} arguments provided\"\n)\n# 2.3 modify ExecNodes corresponding to input ArgExecNodes\nfor ind_arg, arg in enumerate(args):\nnode_id = self.input_ids[ind_arg]\ncall_xn_dict[node_id].result = arg\nreturn call_xn_dict\ndef _get_return_values(self, xn_dict: Dict[Identifier, ExecNode]) -&gt; RVTypes:\n\"\"\"Extract the return value/values from the output of the DAG's scheduler!\n        Args:\n            xn_dict (Dict[Identifier, ExecNode]): Modified ExecNodes returned by the DAG's scheduler\n        Raises:\n            TawaziTypeError: if the type of the return value is not compatible with RVTypes\n        Returns:\n            RVTypes: the actual values extracted from xn_dict\n        \"\"\"\nif self.return_ids is None:\nreturn None\nif isinstance(self.return_ids, Identifier):\nreturn _filter_noval(xn_dict[self.return_ids].result)\nif isinstance(self.return_ids, (tuple, list)):\ngen = (_filter_noval(xn_dict[ren_id].result) for ren_id in self.return_ids)\nif isinstance(self.return_ids, tuple):\nreturn tuple(gen)\nif isinstance(self.return_ids, list):\nreturn list(gen)\nif isinstance(self.return_ids, dict):\nreturn {\nkey: _filter_noval(xn_dict[ren_id].result)\nfor key, ren_id in self.return_ids.items()\n}\nraise TawaziTypeError(\"Return type for the DAG can only be a single value, Tuple or List\")\n# NOTE: this function should be used in case there was a bizarre behavior noticed during\n#   the execution of the DAG via DAG.execute(...)\ndef _safe_execute(\nself,\n*args: Any,\ntarget_nodes: Optional[List[Alias]] = None,\nexclude_nodes: Optional[List[Alias]] = None,\n) -&gt; Any:\n\"\"\"Execute the ExecNodes in topological order without priority in for loop manner for debugging purposes.\n        Args:\n            *args (Any): Positional arguments passed to the DAG\n            target_nodes (Optional[List[Alias]]): the ExecNodes that should be considered to construct the subgraph\n            exclude_nodes (Optional[List[Alias]]): the ExecNodes that shouldn't run\n        Returns:\n            Any: the result of the execution of the DAG.\n             If an ExecNode returns a value in the DAG but is not executed, it will return None.\n        \"\"\"\n# 1. make the graph_ids to be executed!\ngraph = self._make_subgraph(target_nodes, exclude_nodes)\n# 2. make call_xn_dict that will be modified\ncall_xn_dict = self._make_call_xn_dict(*args)\n# 3. deep copy the node_dict to store the results in each node\nfor xn_id in graph.topologically_sorted:\n# only execute ExecNodes that are part of the subgraph\ncall_xn_dict[xn_id]._execute(call_xn_dict)\n# 4. make returned values\nreturn self._get_return_values(call_xn_dict)\ndef _handle_exception(self, graph: DiGraphEx, fut: \"Future[Any]\", id_: Identifier) -&gt; None:\n\"\"\"Checks if futures have produced exceptions, and handles them according to the specified behavior.\n        Args:\n            graph: the graph\n            fut: the thread future\n            id_: the Identifier of the current ExecNode\n        Raises:\n            NotImplementedError: if self.behavior is not known\n        \"\"\"\nif self.behavior == ErrorStrategy.strict:\n# will raise the first encountered exception if there's one\n# no simpler way to check for exception, and not supported by flake8\n_res = fut.result()  # noqa: F841\nelse:\ntry:\n_res = fut.result()  # noqa: F841\nexcept Exception as e:\nlogger.exception(f\"The feature {id_} encountered the following error:\")\nif self.behavior == ErrorStrategy.permissive:\nlogger.warning(\"Ignoring exception as the behavior is set to permissive\")\nelif self.behavior == ErrorStrategy.all_children:\n# remove all its children. Current node will be removed directly afterwards\nsuccessors = list(graph.successors(id_))\nfor children_ids in successors:\n# TODO: implement a test for all_children! it should fail!\n# Afterwards include parameter to remove the node itself or not\ngraph.remove_recursively(children_ids)\nelse:\nraise NotImplementedError(f\"Unknown behavior name: {self.behavior}\") from e\ndef config_from_dict(self, config: Dict[str, Any]) -&gt; None:\n\"\"\"Allows reconfiguring the parameters of the nodes from a dictionary.\n        Args:\n            config (Dict[str, Any]): the dictionary containing the config\n                example: {\"nodes\": {\"a\": {\"priority\": 3, \"is_sequential\": True}}, \"max_concurrency\": 3}\n        Raises:\n            ValueError: if two nodes are configured by the provided config (which is ambiguous)\n        \"\"\"\ndef _override_node_config(n: ExecNode, cfg: Dict[str, Any]) -&gt; bool:\nif \"is_sequential\" in cfg:\nn.is_sequential = cfg[\"is_sequential\"]\nif \"priority\" in cfg:\nn.priority = cfg[\"priority\"]\nreturn True\nreturn False\nprio_flag = False\nvisited: Dict[str, Any] = {}\nif \"nodes\" in config:\nfor alias, conf_node in config[\"nodes\"].items():\nids_ = self._alias_to_ids(alias)\nfor node_id in ids_:\nif node_id not in visited:\nnode = self.get_node_by_id(node_id)\nnode_prio_flag = _override_node_config(node, conf_node)\nprio_flag = node_prio_flag or prio_flag  # keep track of flag\nelse:\nraise ValueError(\nf\"trying to set two configs for node {node_id}.\\n 1) {visited[node_id]}\\n 2) {conf_node}\"\n)\nvisited[node_id] = conf_node\nif \"max_concurrency\" in config:\nself.max_concurrency = config[\"max_concurrency\"]\nif prio_flag:\n# if we changed the priority of some nodes we need to recompute the compound prio\nself._assign_compound_priority()\ndef config_from_yaml(self, config_path: str) -&gt; None:\n\"\"\"Allows reconfiguring the parameters of the nodes from a YAML file.\n        Args:\n            config_path: the path to the YAML file\n        \"\"\"\nwith open(config_path) as f:\nyaml_config = yaml.load(f, Loader=_UniqueKeyLoader)  # noqa: S506\nself.config_from_dict(yaml_config)\ndef config_from_json(self, config_path: str) -&gt; None:\n\"\"\"Allows reconfiguring the parameters of the nodes from a JSON file.\n        Args:\n            config_path: the path to the JSON file\n        \"\"\"\nwith open(config_path) as f:\njson_config = json.load(f)\nself.config_from_dict(json_config)\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.__call__","title":"<code>__call__(*args, **kwargs)</code>","text":"<p>Execute the DAG scheduler via a similar interface to the function that describes the dependencies.</p> Currently kwargs are not supported. <p>They will supported soon!</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>P.args</code> <p>arguments to be passed to the call of the DAG</p> <code>()</code> <code>**kwargs</code> <code>P.kwargs</code> <p>keyword arguments to be passed to the call of the DAG</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>RVDAG</code> <code>RVDAG</code> <p>return value of the DAG's execution</p> <p>Raises:</p> Type Description <code>TawaziUsageError</code> <p>kwargs are passed</p> Source code in <code>tawazi/dag.py</code> <pre><code>def __call__(self, *args: P.args, **kwargs: P.kwargs) -&gt; RVDAG:\n\"\"\"Execute the DAG scheduler via a similar interface to the function that describes the dependencies.\n    Note: Currently kwargs are not supported.\n        They will supported soon!\n    Args:\n        *args (P.args): arguments to be passed to the call of the DAG\n        **kwargs (P.kwargs): keyword arguments to be passed to the call of the DAG\n    Returns:\n        RVDAG: return value of the DAG's execution\n    Raises:\n        TawaziUsageError: kwargs are passed\n    \"\"\"\nif kwargs:\nraise TawaziUsageError(f\"currently DAG does not support keyword arguments: {kwargs}\")\n# 1. generate the subgraph to be executed\ngraph = self._make_subgraph()\n# 2. copy the ExecNodes\ncall_xn_dict = self._make_call_xn_dict(*args)\n# 3. Execute the scheduler\nall_nodes_dict = self._execute(graph, call_xn_dict)\n# 4. extract the returned value/values\nreturn self._get_return_values(all_nodes_dict)  # type: ignore[return-value]\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.config_from_dict","title":"<code>config_from_dict(config)</code>","text":"<p>Allows reconfiguring the parameters of the nodes from a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>the dictionary containing the config example: {\"nodes\": {\"a\": {\"priority\": 3, \"is_sequential\": True}}, \"max_concurrency\": 3}</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if two nodes are configured by the provided config (which is ambiguous)</p> Source code in <code>tawazi/dag.py</code> <pre><code>def config_from_dict(self, config: Dict[str, Any]) -&gt; None:\n\"\"\"Allows reconfiguring the parameters of the nodes from a dictionary.\n    Args:\n        config (Dict[str, Any]): the dictionary containing the config\n            example: {\"nodes\": {\"a\": {\"priority\": 3, \"is_sequential\": True}}, \"max_concurrency\": 3}\n    Raises:\n        ValueError: if two nodes are configured by the provided config (which is ambiguous)\n    \"\"\"\ndef _override_node_config(n: ExecNode, cfg: Dict[str, Any]) -&gt; bool:\nif \"is_sequential\" in cfg:\nn.is_sequential = cfg[\"is_sequential\"]\nif \"priority\" in cfg:\nn.priority = cfg[\"priority\"]\nreturn True\nreturn False\nprio_flag = False\nvisited: Dict[str, Any] = {}\nif \"nodes\" in config:\nfor alias, conf_node in config[\"nodes\"].items():\nids_ = self._alias_to_ids(alias)\nfor node_id in ids_:\nif node_id not in visited:\nnode = self.get_node_by_id(node_id)\nnode_prio_flag = _override_node_config(node, conf_node)\nprio_flag = node_prio_flag or prio_flag  # keep track of flag\nelse:\nraise ValueError(\nf\"trying to set two configs for node {node_id}.\\n 1) {visited[node_id]}\\n 2) {conf_node}\"\n)\nvisited[node_id] = conf_node\nif \"max_concurrency\" in config:\nself.max_concurrency = config[\"max_concurrency\"]\nif prio_flag:\n# if we changed the priority of some nodes we need to recompute the compound prio\nself._assign_compound_priority()\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.config_from_json","title":"<code>config_from_json(config_path)</code>","text":"<p>Allows reconfiguring the parameters of the nodes from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>the path to the JSON file</p> required Source code in <code>tawazi/dag.py</code> <pre><code>def config_from_json(self, config_path: str) -&gt; None:\n\"\"\"Allows reconfiguring the parameters of the nodes from a JSON file.\n    Args:\n        config_path: the path to the JSON file\n    \"\"\"\nwith open(config_path) as f:\njson_config = json.load(f)\nself.config_from_dict(json_config)\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.config_from_yaml","title":"<code>config_from_yaml(config_path)</code>","text":"<p>Allows reconfiguring the parameters of the nodes from a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>the path to the YAML file</p> required Source code in <code>tawazi/dag.py</code> <pre><code>def config_from_yaml(self, config_path: str) -&gt; None:\n\"\"\"Allows reconfiguring the parameters of the nodes from a YAML file.\n    Args:\n        config_path: the path to the YAML file\n    \"\"\"\nwith open(config_path) as f:\nyaml_config = yaml.load(f, Loader=_UniqueKeyLoader)  # noqa: S506\nself.config_from_dict(yaml_config)\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.draw","title":"<code>draw(k=0.8, display=True, t=3)</code>","text":"<p>Draws the Networkx directed graph.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>float</code> <p>parameter for the layout of the graph, the higher, the further the nodes apart. Defaults to 0.8.</p> <code>0.8</code> <code>display</code> <code>bool</code> <p>display the layout created. Defaults to True.</p> <code>True</code> <code>t</code> <code>int</code> <p>time to display in seconds. Defaults to 3.</p> <code>3</code> Source code in <code>tawazi/dag.py</code> <pre><code>def draw(self, k: float = 0.8, display: bool = True, t: int = 3) -&gt; None:\n\"\"\"Draws the Networkx directed graph.\n    Args:\n        k (float): parameter for the layout of the graph, the higher, the further the nodes apart. Defaults to 0.8.\n        display (bool): display the layout created. Defaults to True.\n        t (int): time to display in seconds. Defaults to 3.\n    \"\"\"\nimport matplotlib.pyplot as plt\n# TODO: use graphviz instead! it is much more elegant\npos = nx.spring_layout(self.graph_ids, seed=42069, k=k, iterations=20)\nnx.draw(self.graph_ids, pos, with_labels=True)\nif display:\nplt.ion()\nplt.show()\ntime.sleep(t)\nplt.close()\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.executor","title":"<code>executor(**kwargs)</code>","text":"<p>Generates a DAGExecution for the DAG.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>keyword arguments to be passed to DAGExecution's constructor</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>DAGExecution</code> <code>DAGExecution[P, RVDAG]</code> <p>an executor for the DAG</p> Source code in <code>tawazi/dag.py</code> <pre><code>def executor(self, **kwargs: Any) -&gt; \"DAGExecution[P, RVDAG]\":\n\"\"\"Generates a DAGExecution for the DAG.\n    Args:\n        **kwargs (Any): keyword arguments to be passed to DAGExecution's constructor\n    Returns:\n        DAGExecution: an executor for the DAG\n    \"\"\"\nreturn DAGExecution(self, **kwargs)\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.get_node_by_id","title":"<code>get_node_by_id(id_)</code>","text":"<p>Get the ExecNode with the given id.</p> the returned ExecNode is not modified by any execution! <p>This means that you can not get the result of its execution via <code>DAG.get_node_by_id(&lt;id&gt;).result</code>. In order to do that, you need to make a DAGExecution and then call <code>DAGExecution.get_node_by_id(&lt;id&gt;).result</code>, which will contain the results.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>Identifier</code> <p>id of the ExecNode</p> required <p>Returns:</p> Name Type Description <code>ExecNode</code> <code>ExecNode</code> <p>corresponding ExecNode</p> Source code in <code>tawazi/dag.py</code> <pre><code>def get_node_by_id(self, id_: Identifier) -&gt; ExecNode:\n\"\"\"Get the ExecNode with the given id.\n    Note: the returned ExecNode is not modified by any execution!\n        This means that you can not get the result of its execution via `DAG.get_node_by_id(&lt;id&gt;).result`.\n        In order to do that, you need to make a DAGExecution and then call `DAGExecution.get_node_by_id(&lt;id&gt;).result`, which will contain the results.\n    Args:\n        id_ (Identifier): id of the ExecNode\n    Returns:\n        ExecNode: corresponding ExecNode\n    \"\"\"\n# TODO: ? catch the keyError and\n#   help the user know the id of the ExecNode by pointing to documentation!?\nreturn self.node_dict[id_]\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.get_nodes_by_tag","title":"<code>get_nodes_by_tag(tag)</code>","text":"<p>Get the ExecNodes with the given tag.</p> the returned ExecNode is not modified by any execution! <p>This means that you can not get the result of its execution via <code>DAG.get_nodes_by_tag(&lt;tag&gt;).result</code>. In order to do that, you need to make a DAGExecution and then call <code>DAGExecution.get_nodes_by_tag(&lt;tag&gt;).result</code>, which will contain the results.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Any</code> <p>tag of the ExecNodes</p> required <p>Returns:</p> Type Description <code>List[ExecNode]</code> <p>List[ExecNode]: corresponding ExecNodes</p> Source code in <code>tawazi/dag.py</code> <pre><code>def get_nodes_by_tag(self, tag: Any) -&gt; List[ExecNode]:\n\"\"\"Get the ExecNodes with the given tag.\n    Note: the returned ExecNode is not modified by any execution!\n        This means that you can not get the result of its execution via `DAG.get_nodes_by_tag(&lt;tag&gt;).result`.\n        In order to do that, you need to make a DAGExecution and then call `DAGExecution.get_nodes_by_tag(&lt;tag&gt;).result`, which will contain the results.\n    Args:\n        tag (Any): tag of the ExecNodes\n    Returns:\n        List[ExecNode]: corresponding ExecNodes\n    \"\"\"\nreturn [ex_n for ex_n in self.exec_nodes if ex_n.tag == tag]\n</code></pre>"},{"location":"dag/#tawazi.dag.DAG.setup","title":"<code>setup(target_nodes=None, exclude_nodes=None)</code>","text":"<p>Run the setup ExecNodes for the DAG.</p> <p>If target_nodes are provided, run only the necessary setup ExecNodes, otherwise will run all setup ExecNodes.</p> <code>DAG</code> arguments should not be passed to setup ExecNodes. <p>Only pass in constants or setup <code>ExecNode</code>s results.</p> <p>Parameters:</p> Name Type Description Default <code>target_nodes</code> <code>Optional[List[XNId]]</code> <p>The ExecNodes that the user aims to use in the DAG. This might include setup or non setup ExecNodes. If None is provided, will run all setup ExecNodes. Defaults to None.</p> <code>None</code> <code>exclude_nodes</code> <code>Optional[List[XNId]]</code> <p>The ExecNodes that the user aims to exclude from the DAG. The user is responsible for ensuring that the overlapping between the target_nodes and exclude_nodes is logical.</p> <code>None</code> Source code in <code>tawazi/dag.py</code> <pre><code>def setup(\nself,\ntarget_nodes: Optional[List[Alias]] = None,\nexclude_nodes: Optional[List[Alias]] = None,\n) -&gt; None:\n\"\"\"Run the setup ExecNodes for the DAG.\n    If target_nodes are provided, run only the necessary setup ExecNodes, otherwise will run all setup ExecNodes.\n    NOTE: `DAG` arguments should not be passed to setup ExecNodes.\n        Only pass in constants or setup `ExecNode`s results.\n    Args:\n        target_nodes (Optional[List[XNId]], optional): The ExecNodes that the user aims to use in the DAG.\n            This might include setup or non setup ExecNodes. If None is provided, will run all setup ExecNodes. Defaults to None.\n        exclude_nodes (Optional[List[XNId]], optional): The ExecNodes that the user aims to exclude from the DAG.\n            The user is responsible for ensuring that the overlapping between the target_nodes and exclude_nodes is logical.\n    \"\"\"\n# 1. select all setup ExecNodes\n#  do not copy the setup nodes because we want them to be modified per DAG instance!\nall_setup_nodes = {\nnd.id: nd\nfor nd in self.exec_nodes\nif nd.setup or (isinstance(nd, ArgExecNode) and nd.executed)\n}\n# 2. if target_nodes is not provided run all setup ExecNodes\nif target_nodes is None:\ntarget_ids = list(all_setup_nodes.keys())\ngraph = self._make_subgraph(target_ids, exclude_nodes)  # type: ignore[arg-type]\nelse:\n# 2.1 the leaves_ids that the user wants to execute\n#  however they might contain non setup nodes... so we should extract all the nodes ids\n#  that must be run in order to run the target_nodes ExecNodes\n#  afterwards we can remove the non setup nodes\ntarget_ids = self._get_target_ids(target_nodes)\n# 2.2 filter non setup ExecNodes\ngraph = self._make_subgraph(target_ids, exclude_nodes)  # type: ignore[arg-type]\nids_to_remove = [id_ for id_ in graph if id_ not in all_setup_nodes]\nfor id_ in ids_to_remove:\ngraph.remove_node(id_)\n# TODO: handle debug XNs!\nself._execute(graph, all_setup_nodes)\n</code></pre>"},{"location":"decorators/","title":"decorators","text":"<p>Decorators of Tawazi.</p> <p>The user should use the decorators <code>@dag</code> and <code>@xn</code> to create Tawazi objects <code>DAG</code> and <code>ExecNode</code>.</p>"},{"location":"decorators/#tawazi.decorators.xn","title":"<code>xn(func=None, *, priority=0, is_sequential=Cfg.TAWAZI_IS_SEQUENTIAL, debug=False, tag=None, setup=False)</code>","text":"<p>Decorate a normal function to make it an ExecNode.</p> <p>When the decorated function is called inside a <code>DAG</code>, you are actually calling an <code>ExecNode</code>. This way we can record the dependencies in order to build the actual DAG. Please check the example in the README for a guide to the usage.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>[Callable[P, RVXN]</code> <p>a Callable that will be executed in the <code>DAG</code></p> <code>None</code> <code>priority</code> <code>int</code> <p>priority of the execution with respect to other <code>ExecNode</code>s</p> <code>0</code> <code>is_sequential</code> <code>bool</code> <p>whether to allow the execution of this <code>ExecNode</code> with others or not. If <code>True</code>, all other <code>ExecNode</code> currently running will stop before this one starts executing.</p> <code>Cfg.TAWAZI_IS_SEQUENTIAL</code> <code>debug</code> <code>bool</code> <p>if <code>True</code>, will execute only when Debug mode is active. a debug <code>ExecNode</code> will run its inputs exists regardless of subgraph choice.</p> <code>False</code> <code>tag</code> <code>Any</code> <p>Any Hashable / immutable typed variable can be used to identify nodes (str, Tuples, int etc.). It is the responsibility of the user to provide this immutability of the tag.</p> <code>None</code> <code>setup</code> <code>bool</code> <p>if True, will be executed only once during the lifetime of a <code>DAG</code> instance. Setup <code>ExecNode</code>s are meant to be used to load heavy data only once inside the execution pipeline and then be used as if the results of their execution were cached. This can be useful if you want to load heavy ML models, heavy Data etc. Note that you can run all / subset of the setup nodes by invoking the DAG.setup method NOTE setup nodes are currently not threadsafe!     because they are shared between all threads!     If you execute the same pipeline in multiple threads during the setup phase, the behavior is undefined.     This is why it is best to invoke the DAG.setup method before using the DAG in a multithreaded environment.     This problem will be resolved in the future</p> <code>False</code> <p>Returns:</p> Name Type Description <code>LazyExecNode</code> <code>Union[Callable[[Callable[P, RVXN]], LazyExecNode[P, RVXN]], LazyExecNode[P, RVXN]]</code> <p>The decorated function wrapped in an <code>ExecNode</code>.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the decorated function passed is not a <code>Callable</code>.</p> Source code in <code>tawazi/decorators.py</code> <pre><code>def xn(\nfunc: Optional[Callable[P, RVXN]] = None,\n*,\npriority: int = 0,\nis_sequential: bool = Cfg.TAWAZI_IS_SEQUENTIAL,\ndebug: bool = False,\ntag: Optional[Any] = None,\nsetup: bool = False,\n) -&gt; Union[Callable[[Callable[P, RVXN]], LazyExecNode[P, RVXN]], LazyExecNode[P, RVXN]]:\n\"\"\"Decorate a normal function to make it an ExecNode.\n    When the decorated function is called inside a `DAG`, you are actually calling an `ExecNode`.\n    This way we can record the dependencies in order to build the actual DAG.\n    Please check the example in the README for a guide to the usage.\n    Args:\n        func ([Callable[P, RVXN]): a Callable that will be executed in the `DAG`\n        priority (int): priority of the execution with respect to other `ExecNode`s\n        is_sequential (bool): whether to allow the execution of this `ExecNode` with others or not.\n            If `True`, all other `ExecNode` currently running will stop before this one starts executing.\n        debug (bool): if `True`, will execute only when Debug mode is active.\n            a debug `ExecNode` will run its inputs exists regardless of subgraph choice.\n        tag (Any): Any Hashable / immutable typed variable can be used to identify nodes (str, Tuples, int etc.).\n            It is the responsibility of the user to provide this immutability of the tag.\n        setup (bool): if True, will be executed only once during the lifetime of a `DAG` instance.\n            Setup `ExecNode`s are meant to be used to load heavy data only once inside the execution pipeline\n            and then be used as if the results of their execution were cached.\n            This can be useful if you want to load heavy ML models, heavy Data etc.\n            Note that you can run all / subset of the setup nodes by invoking the DAG.setup method\n            NOTE setup nodes are currently not threadsafe!\n                because they are shared between all threads!\n                If you execute the same pipeline in multiple threads during the setup phase, the behavior is undefined.\n                This is why it is best to invoke the DAG.setup method before using the DAG in a multithreaded environment.\n                This problem will be resolved in the future\n    Returns:\n        LazyExecNode: The decorated function wrapped in an `ExecNode`.\n    Raises:\n        TypeError: If the decorated function passed is not a `Callable`.\n    \"\"\"\ndef intermediate_wrapper(_func: Callable[P, RVXN]) -&gt; LazyExecNode[P, RVXN]:\nlazy_exec_node = LazyExecNode(_func, priority, is_sequential, debug, tag, setup)\nfunctools.update_wrapper(lazy_exec_node, _func)\nreturn lazy_exec_node\n# case #1: arguments are provided to the decorator\nif func is None:\nreturn intermediate_wrapper\n# case #2: no argument is provided to the decorator\nif not callable(func):\nraise TypeError(f\"{func} is not a callable. Did you use a non-keyword argument?\")\nreturn intermediate_wrapper(func)\n</code></pre>"},{"location":"decorators/#tawazi.decorators.dag","title":"<code>dag(declare_dag_function=None, *, max_concurrency=1, behavior=ErrorStrategy.strict)</code>","text":"<p>Transform the declared <code>ExecNode</code>s into a DAG that can be executed by Tawazi's scheduler.</p> <p>The same DAG can be executed multiple times.</p> dag is thread safe because it uses an internal lock. <p>If you need to construct lots of DAGs in multiple threads, it is best to construct your dag once and then use it as much as you like.</p> <p>Please check the example in the README for a guide to the usage.</p> <p>Parameters:</p> Name Type Description Default <code>declare_dag_function</code> <code>Optional[Callable[P, RVDAG]]</code> <p>a function that describes the execution of the DAG. This function should only contain calls to <code>ExecNode</code>s and data Exchange between them. (i.e. You can not use a normal Python function inside it unless decorated with <code>@xn</code>.) However, you can use some simple python code to generate constants. These constants are computed only once during the <code>DAG</code> declaration.</p> <code>None</code> <code>max_concurrency</code> <code>int</code> <p>the maximum number of concurrent threads to execute in parallel.</p> <code>1</code> <code>behavior</code> <code>ErrorStrategy</code> <p>the behavior of the <code>DAG</code> when an error occurs during the execution of a function (<code>ExecNode</code>).</p> <code>ErrorStrategy.strict</code> <p>Returns:</p> Type Description <code>Union[Callable[[Callable[P, RVDAG]], DAG[P, RVDAG]], DAG[P, RVDAG]]</code> <p>a <code>DAG</code> instance that can be used just like a normal Python function. However it will be executed by Tawazi's scheduler.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If the decorated object is not a Callable.</p> Source code in <code>tawazi/decorators.py</code> <pre><code>def dag(\ndeclare_dag_function: Optional[Callable[P, RVDAG]] = None,\n*,\nmax_concurrency: int = 1,\nbehavior: ErrorStrategy = ErrorStrategy.strict,\n) -&gt; Union[Callable[[Callable[P, RVDAG]], DAG[P, RVDAG]], DAG[P, RVDAG]]:\n\"\"\"Transform the declared `ExecNode`s into a DAG that can be executed by Tawazi's scheduler.\n    The same DAG can be executed multiple times.\n    Note: dag is thread safe because it uses an internal lock.\n        If you need to construct lots of DAGs in multiple threads,\n        it is best to construct your dag once and then use it as much as you like.\n    Please check the example in the README for a guide to the usage.\n    Args:\n        declare_dag_function: a function that describes the execution of the DAG.\n            This function should only contain calls to `ExecNode`s and data Exchange between them.\n            (i.e. You can not use a normal Python function inside it unless decorated with `@xn`.)\n            However, you can use some simple python code to generate constants.\n            These constants are computed only once during the `DAG` declaration.\n        max_concurrency: the maximum number of concurrent threads to execute in parallel.\n        behavior: the behavior of the `DAG` when an error occurs during the execution of a function (`ExecNode`).\n    Returns:\n        a `DAG` instance that can be used just like a normal Python function. However it will be executed by Tawazi's scheduler.\n    Raises:\n        TypeError: If the decorated object is not a Callable.\n    \"\"\"\n# wrapper used to support parametrized and non parametrized decorators\ndef intermediate_wrapper(_func: Callable[P, RVDAG]) -&gt; DAG[P, RVDAG]:\n# 0. Protect against multiple threads declaring many DAGs at the same time\nwith exec_nodes_lock:\n# 1. node.exec_nodes contains all the ExecNodes that concern the DAG being built at the moment.\n#      make sure it is empty\nnode.exec_nodes = []\ntry:\n# 2. make ExecNodes corresponding to the arguments of the ExecNode\n# 2.1 get the names of the arguments and the default values\nfunc_args, func_default_args = get_args_and_default_args(_func)\n# 2.2 Construct non default arguments.\n# Corresponding values must be provided during usage\nargs: List[ExecNode] = [ArgExecNode(_func, arg_name) for arg_name in func_args]\n# 2.2 Construct Default arguments.\nargs.extend(\n[\nArgExecNode(_func, arg_name, arg)\nfor arg_name, arg in func_default_args.items()\n]\n)\n# 2.3 Arguments are also ExecNodes that get executed inside the scheduler\nnode.exec_nodes.extend(args)\n# 3. Execute the dependency describer function\n# NOTE: Only ordered parameters are supported at the moment!\n#  No **kwargs!! Only positional Arguments\nreturned_exec_nodes = _func(*args)  # type: ignore[arg-type]\n# 4. Construct the DAG instance\nd: DAG[P, RVDAG] = DAG(\nnode.exec_nodes, max_concurrency=max_concurrency, behavior=behavior\n)\n# clean up even in case an error is raised during dag construction\nfinally:\n# 5. Clean global variable\n# node.exec_nodes are deep copied inside the DAG.\n#   we can empty the global variable node.exec_nodes\nnode.exec_nodes = []\nd.input_ids = [arg.id for arg in args]\n# 6. make the return ids to be fetched at the end of the computation\nd.return_ids = get_return_ids(returned_exec_nodes)\nfunctools.update_wrapper(d, _func)\nd._validate()\nreturn d\n# case 1: arguments are provided to the decorator\nif declare_dag_function is None:\n# return a decorator\nreturn intermediate_wrapper\n# case 2: arguments aren't provided to the decorator\nif not callable(declare_dag_function):\nraise TypeError(\nf\"{declare_dag_function} is not a callable. Did you use a non-keyword argument?\"\n)\nreturn intermediate_wrapper(declare_dag_function)\n</code></pre>"},{"location":"future_developments/","title":"Future Developments","text":""},{"location":"future_developments/#soon-to-be-released","title":"Soon to be released","text":"<p>A couple of features will be released soon:</p> <ul> <li>handle problems when calling <code>ExecNodes</code> wrongly.</li> <li>(for example when using args as parameters but only *kwargs are provided).</li> <li>Calling <code>ExecNodes</code> must be similar to calling the original function (must imitate the same signature otherwise raise the correct exception).</li> <li>support mixing ExecNodes and non <code>ExecNodes</code> functions.</li> <li>test the case where <code>ExecNodes</code> are stored in a list and then passed via * operator.</li> <li>add feature to turn off a set of nodes in the graph.</li> <li>an example of running a set of calculations with the <code>DAG</code> and without the <code>DAG</code>.</li> <li>we can show that using tawazi is transparent and one just has to remove the decorators. Then everything is back to normal.</li> <li>Include python, mypy, black etc. in the <code>README</code>.</li> <li>decide whether to identify the <code>ExecNode</code> by a Hashable ID or by its own Python ID. This is breaking change and must change to 0.2.1.</li> <li>support multiple return of a function!? this is rather complicated. We'll have to wrap every returned value. in an object and then decide the dependencies using that.</li> <li>support constants by resolving the error in the tests.</li> <li>Remove the global object and maybe replace it with an attribute to the creating function.</li> <li>improve the graph dependency rendering on the console.</li> <li>change the behavior of the execution according to the return value of the dagger function:</li> <li>return all the results of the execution of all returned <code>ExecNodes</code>.</li> <li>also return all the results just like it is being done at the moment.</li> <li>automatically generate release on new tag https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes#configuring-automatically-generated-release-notes</li> <li>make the badges the same as Tensorflow's (python3.7|3.8|3.9|3.10)</li> <li>use opnssf service to evaluate code best practices https://bestpractices.coreinfrastructure.org/fr/projects/1486</li> </ul>"},{"location":"future_developments/#features-to-be-discussed","title":"Features to be discussed","text":"<ul> <li>support multiprocessing.</li> <li>simulation of the execution using a <code>DAG</code> stored ledger.</li> <li>Disallow execution in parallel of some threads in parallel with some other threads.</li> <li>maybe by making a group of threads that are CPU bound and a group of threads that are IO bound ?</li> <li>Remove dependency on networkx to make <code>tawazi</code> a standalone package.</li> <li>save the results of the calculation in pickled format in case an error is encountered ? or just at the end of the run</li> <li>re-run the same calculations of the graph but take the input from the presaved pickle files instead</li> <li>the goal of this library is to run the DAG nodes in parallel and to run the same DAG in parallel in multiple threads or to run the same ops between different DAGs with no side effects whatsoever</li> <li>put documentation about different cases where it is advantageous to use it</li> <li>in methods not only in functions</li> <li>in a gunicorn application</li> <li>for getting information from multiple resources</li> <li>pretty-print the graph deps on the console:</li> </ul> <ul> <li>change the behavior of the execution according to the return value of the dagger function:</li> <li>return all the results of the execution of all returned ExecNodes</li> <li>also return all the results just like it is being done at the moment!</li> <li>put link to the article in the README</li> <li>change some attributes into properties:</li> <li>concurrency must be int &gt;= 1</li> <li>make an extended dictionary which uses the id of the ExecNode for Get and Set for the returned values</li> <li>remove the argument_name behavior using a more intelligent way</li> <li>or instead of doing this, you can make this optional and then prefer to infer the argument_name more intelligently using the place in the arguments where the ExecNode was passed!</li> <li>use a different method to extract the code from the README in order to test it</li> </ul>"},{"location":"nodes/","title":"ExecNodes","text":"<p>warning: This page describes some internal functionalities of Tawazi, it is still subject to change during minor releases.</p> <p>This class is the base executable node of the Directed Acyclic Execution Graph.</p> <p>An ExecNode is an Object that can be executed inside a DAG scheduler.</p> <p>It basically consists of a function (exec_function) that takes args and kwargs and returns a value.</p> <p>When the ExecNode is executed in the DAG, the resulting value will be stored in the ExecNode.result instance attribute.</p> This class is not meant to be instantiated directly. <p>Please use <code>@xn</code> decorator.</p> Source code in <code>tawazi/node.py</code> <pre><code>class ExecNode:\n\"\"\"This class is the base executable node of the Directed Acyclic Execution Graph.\n    An ExecNode is an Object that can be executed inside a DAG scheduler.\n    It basically consists of a function (exec_function) that takes args and kwargs and returns a value.\n    When the ExecNode is executed in the DAG, the resulting value will be stored in the ExecNode.result instance attribute.\n    Note: This class is not meant to be instantiated directly.\n        Please use `@xn` decorator.\n    \"\"\"\ndef __init__(\nself,\nid_: Identifier,\nexec_function: Callable[..., Any] = lambda *args, **kwargs: None,\nargs: Optional[List[\"ExecNode\"]] = None,\nkwargs: Optional[Dict[str, \"ExecNode\"]] = None,\npriority: int = 0,\nis_sequential: bool = Cfg.TAWAZI_IS_SEQUENTIAL,\ndebug: bool = False,\ntag: Tag = None,\nsetup: bool = False,\n):\n\"\"\"Constructor of ExecNode.\n        Args:\n            id_ (Identifier): identifier of ExecNode.\n            exec_function (Callable): a callable will be executed in the graph.\n                This is useful to make Joining ExecNodes (Nodes that enforce dependencies on the graph)\n            args (Optional[List[ExecNode]], optional): *args to pass to exec_function.\n            kwargs (Optional[Dict[str, ExecNode]], optional): **kwargs to pass to exec_function.\n            priority (int): priority compared to other ExecNodes; the higher the number the higher the priority.\n            is_sequential (bool): whether to execute this ExecNode in sequential order with respect to others.\n                When this ExecNode must be executed, all other nodes are waited to finish before starting execution.\n                Defaults to False.\n            debug (bool): Make this ExecNode a debug Node. Defaults to False.\n            tag (Tag): Attach a Tag of this ExecNode. Defaults to None.\n            setup (bool): Make this ExecNode a setup Node. Defaults to False.\n        Raises:\n            ValueError: if setup and debug are both True.\n        \"\"\"\n# 1. assign attributes\nself._id = id_\nself.exec_function = exec_function\nself.priority = priority\nself.is_sequential = is_sequential\nself.debug = debug\nself.tag = tag\nself.setup = setup\nself.args: List[ExecNode] = args or []\nself.kwargs: Dict[Identifier, ExecNode] = kwargs or {}\n# 2. compound_priority equals priority at the start but will be modified during the build process\nself.compound_priority = priority\n# 3. Assign the name\n# This can be used in the future but is not particularly useful at the moment\nself.__name__ = self.exec_function.__name__ if not isinstance(id_, str) else id_\n# 4. Assign a default NoVal to the result of the execution of this ExecNode,\n#  when this ExecNode will be executed, self.result will be overridden\n# It would be amazing if we can remove self.result and make ExecNode immutable\nself.result: Union[NoValType, Any] = NoVal\n\"\"\"Internal attribute to store the result of the execution of this ExecNode (Might change!).\"\"\"\n# even though setting result to NoVal is not necessary... it clarifies debugging\nself.profile = Profile(Cfg.TAWAZI_PROFILE_ALL_NODES)\n@property\ndef executed(self) -&gt; bool:\n\"\"\"Whether this ExecNode has been executed.\"\"\"\nreturn self.result is not NoVal\ndef __repr__(self) -&gt; str:\n\"\"\"Human representation of the ExecNode.\n        Returns:\n            str: human representation of the ExecNode.\n        \"\"\"\nreturn f\"{self.__class__.__name__} {self.id} ~ | &lt;{hex(id(self))}&gt;\"\n# TODO: make cached_property ?\n@property\ndef dependencies(self) -&gt; List[\"ExecNode\"]:\n\"\"\"The List of ExecNode dependencies of This ExecNode. NOTE: This will change!\n        Returns:\n            List[ExecNode]: the List of ExecNode dependencies of This ExecNode.\n        \"\"\"\n# Making the dependencies\n# 1. from args\ndeps = self.args.copy()\n# 2. and from kwargs\ndeps.extend(self.kwargs.values())\nreturn deps\n@property\ndef id(self) -&gt; Identifier:\n\"\"\"The identifier of this ExecNode.\"\"\"\nreturn self._id\n@property\ndef tag(self) -&gt; Tag:\n\"\"\"The Tag of this ExecNode.\"\"\"\nreturn self._tag\n@tag.setter\ndef tag(self, value: Tag) -&gt; None:\nif not isinstance(value, (str, tuple)) and value is not None:\nraise TypeError(f\"tag should be of type {Tag} but {value} provided\")\nself._tag = value\n@property\ndef priority(self) -&gt; int:\n\"\"\"The priority of this ExecNode.\"\"\"\nreturn self._priority\n@priority.setter\ndef priority(self, value: int) -&gt; None:\nif not isinstance(value, int):\nraise ValueError(f\"priority must be an int, provided {type(value)}\")\nself._priority = value\n@property\ndef is_sequential(self) -&gt; bool:\n\"\"\"Whether `ExecNode` runs in sequential order with respect to other `ExecNode`s.\"\"\"\nreturn self._is_sequential\n@is_sequential.setter\ndef is_sequential(self, value: bool) -&gt; None:\nif not isinstance(value, bool):\nraise TypeError(f\"is_sequential should be of type bool, but {value} provided\")\nself._is_sequential = value\n@property\ndef debug(self) -&gt; bool:\n\"\"\"Whether this ExecNode is a debug Node. ExecNode can't be setup and debug simultaneously.\"\"\"\nreturn self._debug\n@debug.setter\ndef debug(self, value: bool) -&gt; None:\nif not isinstance(value, bool):\nraise TypeError(f\"debug must be of type bool, but {value} provided\")\nself._debug = value\nself._validate()\n@property\ndef setup(self) -&gt; bool:\n\"\"\"Whether this ExecNode is a setup Node. ExecNode can't be setup and debug simultaneously.\"\"\"\nreturn self._setup\n@setup.setter\ndef setup(self, value: bool) -&gt; None:\nif not isinstance(value, bool):\nraise TypeError(f\"setup must be of type bool, but {value} provided\")\nself._setup = value\nself._validate()\ndef _execute(self, node_dict: Dict[Identifier, \"ExecNode\"]) -&gt; Optional[Any]:\n\"\"\"Execute the ExecNode inside of a DAG.\n        Args:\n            node_dict (Dict[Identifier, ExecNode]): A shared dictionary containing the other ExecNodes in the DAG;\n                the key is the id of the ExecNode. This node_dict refers to the current execution\n        Returns:\n            the result of the execution of the current ExecNode\n        \"\"\"\nlogger.debug(f\"Start executing {self.id} with task {self.exec_function}\")\nself.profile = Profile(Cfg.TAWAZI_PROFILE_ALL_NODES)\nif self.executed:\nlogger.debug(f\"Skipping execution of a pre-computed node {self.id}\")\nreturn self.result\n# 1. pre-\n# 1.1 prepare the profiling\nwith self.profile:\n# 1.2 prepare args and kwargs for usage:\nargs = [node_dict[node.id].result for node in self.args]\nkwargs = {key: node_dict[node.id].result for key, node in self.kwargs.items()}\n# args = [arg.result for arg in self.args]\n# kwargs = {key: arg.result for key, arg in self.kwargs.items()}\n# 2 post-\n# 2.1 write the result\nself.result = self.exec_function(*args, **kwargs)\n# 3. useless return value\nlogger.debug(f\"Finished executing {self.id} with task {self.exec_function}\")\nreturn self.result\ndef _assign_reserved_args(self, arg_name: str, value: Any) -&gt; bool:\n# TODO: change value type to Union[Tag, Setup etc...] when other special attributes are introduced\nif arg_name == ARG_NAME_TAG:\nself.tag = value\nreturn True\nreturn False\ndef _validate(self) -&gt; None:\nif getattr(self, \"debug\", None) and getattr(self, \"setup\", None):\nraise ValueError(\nf\"The node {self.id} can't be a setup and a debug node at the same time.\"\n)\n</code></pre>"},{"location":"nodes/#tawazi.node.ExecNode.id","title":"<code>id: Identifier</code>  <code>property</code>","text":"<p>The identifier of this ExecNode.</p>"},{"location":"nodes/#tawazi.node.ExecNode.tag","title":"<code>tag: Tag</code>  <code>property</code> <code>writable</code>","text":"<p>The Tag of this ExecNode.</p>"},{"location":"nodes/#tawazi.node.ExecNode.debug","title":"<code>debug: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether this ExecNode is a debug Node. ExecNode can't be setup and debug simultaneously.</p>"},{"location":"nodes/#tawazi.node.ExecNode.setup","title":"<code>setup: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether this ExecNode is a setup Node. ExecNode can't be setup and debug simultaneously.</p>"},{"location":"nodes/#tawazi.node.ExecNode.result","title":"<code>result: Union[NoValType, Any] = NoVal</code>  <code>instance-attribute</code>","text":"<p>Internal attribute to store the result of the execution of this ExecNode (Might change!).</p>"},{"location":"nodes/#tawazi.node.ExecNode.priority","title":"<code>priority: int</code>  <code>property</code> <code>writable</code>","text":"<p>The priority of this ExecNode.</p>"},{"location":"nodes/#tawazi.node.ExecNode.is_sequential","title":"<code>is_sequential: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Whether <code>ExecNode</code> runs in sequential order with respect to other <code>ExecNode</code>s.</p>"},{"location":"nodes/#tawazi.node.ExecNode.executed","title":"<code>executed: bool</code>  <code>property</code>","text":"<p>Whether this ExecNode has been executed.</p>"}]}